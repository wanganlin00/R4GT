# 网络图

<https://igraph.org/>

<https://r.igraph.org/>

<https://ggraph.data-imaginist.com/>

<https://tidygraph.data-imaginist.com/index.html>

<https://yufree.cn/cn/2020/06/24/r-network-analysis/>

<https://kateto.net/network-visualization>

## `tbl_graph`

```{r}
rstat_nodes <- data.frame(name = c("Hadley", "David", "Romain", "Julia"))
rstat_edges <- data.frame(from = c(1, 1, 1, 2, 3, 3, 4, 4, 4),
                            to = c(2, 3, 4, 1, 1, 2, 1, 2, 3))
tbl_graph(nodes = rstat_nodes, edges = rstat_edges)
```

## 节点

```{r}
library(tidygraph)
library(ggraph)
highschool %>% as_tibble()


gr <- as_tbl_graph(highschool)
gr

create_layout(gr,layout = "kk") %>% 
    ggplot()+
    theme(
        axis.text = element_blank(),
        axis.title = element_blank(),
        axis.ticks = element_blank(),
        panel.grid = element_blank(),
    )+
    geom_point(aes(x = x, y = y))


ggraph(gr, layout = "kk") + 
  geom_point(aes(x = x, y = y))

ggraph(gr, layout = 'kk') + 
  geom_node_point()
```


```{r}
gr2 <- tbl_graph(flare$vertices, flare$edges)
gr2


create_layout(gr2,layout = "partition") 

create_layout(gr2,layout = "partition") %>% 
    ggplot()+
    theme(
        axis.text = element_blank(),
        axis.title = element_blank(),
        axis.ticks = element_blank(),
        panel.grid = element_blank(),
    )+
    geom_tile(aes(x=x,y = -y, fill = depth))

ggraph(gr2, layout = 'partition') + 
  geom_node_tile(aes(y = -y, fill = depth))


```



## 边

```{r}
library(ggraph)
library(tidygraph)

highschool$year <- factor(highschool$year)

gr <- as_tbl_graph(highschool) %>% 
    activate(edges)

gr

# link

ggraph(gr, layout = 'kk') + 
  geom_edge_link(aes(colour = year))


# fan

ggraph(gr, layout = 'kk') + 
  geom_edge_fan(aes(colour = year))

# parallel

ggraph(gr, layout = 'kk') + 
  geom_edge_parallel(aes(colour = year))

# loop  make some of the student love themselves
loopy_gr<- gr |> 
  bind_edges(tibble::tibble(from = 1:5, to = 1:5, year = rep('1957', 5)))
ggraph(loopy_gr, layout = 'stress') + 
  geom_edge_link(aes(colour = year), alpha = 0.25) + 
  geom_edge_loop(aes(colour = year))



# Force directed 力导向

ggraph(gr) + 
  geom_edge_bundle_force(n_cycle = 2, threshold = 0.4)



# arc
ggraph(gr, layout = 'linear') + 
  geom_edge_arc(aes(colour = year))



```

```{r}
# hive 蜂巢图
hairball <- as_tbl_graph(highschool) |> 
  mutate(
    year_pop = map_local(mode = 'in', .f = function(neighborhood, ...) {
      neighborhood %E>% pull(year) |> table() |> sort(decreasing = TRUE)
    }),
    pop_devel = map_chr(year_pop, function(pop) {
      if (length(pop) == 0 || length(unique(pop)) == 1) return('unchanged')
      switch(names(pop)[which.max(pop)],
             '1957' = 'decreased',
             '1958' = 'increased')
    }),
    popularity = map_dbl(year_pop, ~ .[1]) %/% 0
  ) |> 
  activate(edges) |> 
  mutate(year = as.character(year))


ggraph(hairball, layout = 'hive', axis = pop_devel, sort.by = popularity) + 
  geom_edge_hive(aes(colour = year)) + 
  geom_axis_hive(label = FALSE) + 
  coord_fixed()


```



```{r}
hierarchy <- as_tbl_graph(hclust(dist(iris[, 1:4]))) |> 
  mutate(Class = map_bfs_back_chr(node_is_root(), .f = function(node, path, ...) {
    if (leaf[node]) {
      as.character(iris$Species[as.integer(label[node])])
    } else {
      species <- unique(unlist(path$result))
      if (length(species) == 1) {
        species
      } else {
        NA_character_
      }
    }
  }))

#  elbow
ggraph(hierarchy, layout = 'dendrogram', height = height) + 
  geom_edge_elbow()
ggraph(hierarchy, layout = 'dendrogram', height = height) + 
  geom_edge_elbow2(aes(colour = node.Class))

ggraph(hierarchy, layout = 'dendrogram', height = height) + 
  geom_edge_diagonal()


ggraph(hierarchy, layout = 'dendrogram', height = height) + 
  geom_edge_bend()
```

### 箭头

```{r}
# Random names - I swear
simple <- create_notable('bull') |> 
  mutate(name = c('Thomas', 'Bob', 'Hadley', 'Winston', 'Baptiste')) |> 
  activate(edges) |> 
  mutate(type = sample(c('friend', 'foe'), 5, TRUE))


ggraph(simple, layout = 'graphopt') + 
  geom_edge_link(arrow = arrow(length = unit(4, 'mm'))) + 
  geom_node_point(size = 5)


ggraph(simple, layout = 'graphopt') + 
  geom_edge_link(arrow = arrow(length = unit(4, 'mm')), 
                 end_cap = circle(3, 'mm')) + 
  geom_node_point(size = 5)

ggraph(simple, layout = 'graphopt') + 
  geom_edge_link(aes(start_cap = label_rect(node1.name),
                     end_cap = label_rect(node2.name)), 
                 arrow = arrow(length = unit(4, 'mm'))) + 
  geom_node_text(aes(label = name))
```

### 标签

```{r}
ggraph(simple, layout = 'graphopt') + 
  geom_edge_link(aes(label = type), 
                 arrow = arrow(length = unit(4, 'mm')), 
                 end_cap = circle(3, 'mm')) + 
  geom_node_point(size = 5)

ggraph(simple, layout = 'graphopt') + 
  geom_edge_link(aes(label = type), 
                 angle_calc = 'along',
                 label_dodge = unit(2.5, 'mm'),
                 arrow = arrow(length = unit(4, 'mm')), 
                 end_cap = circle(3, 'mm')) + 
  geom_node_point(size = 5)
```

### 关联

```{r}
flaregraph <- tbl_graph(flare$vertices, flare$edges)
from <- match(flare$imports$from, flare$vertices$name)
to <- match(flare$imports$to, flare$vertices$name)
ggraph(flaregraph, layout = 'dendrogram', circular = TRUE) + 
  geom_conn_bundle(data = get_con(from = from, to = to), alpha = 0.1) + 
  coord_fixed()
```


## 布局
